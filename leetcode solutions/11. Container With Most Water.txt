'''
11. Container With Most Water

https://leetcode.com/problems/container-with-most-water/

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1

Constraints:
- n == height.length
- 2 <= n <= 10^5
- 0 <= height[i] <= 10^4
'''

class Solution:
    def maxArea(self, height):
        def compute_area(nums, i, j):
            if i >= j or j<0 or i>=len(nums):
                return 0
            else:
                return (j-i)*min(nums[i],nums[j])

        # base/corner cases
        if height is None or len(height) == 0:
            return 0

        # main case
        i = 0
        j = len(height) - 1
        max_so_far = 0
        while i < j:
            max_so_far = max(max_so_far, compute_area(height, i, j))
            if height[i] < height[j]:
                i += 1
            else:
                j -= 1
        return max_so_far

sln = Solution()
height = [1,8,6,2,5,4,8,3,7]
print(sln.maxArea(height))