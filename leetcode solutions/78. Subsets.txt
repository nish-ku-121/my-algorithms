Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]






import java.util.*;
import java.lang.Math;

public class HelloWorld{

    public static void print(List<List<Integer>> ll) {
        for (List<Integer> l : ll) {
            System.out.print("[");
            for (Integer i : l) {
                System.out.print(i + " ");
            }
            System.out.print("]");
            System.out.println();
        }
    }

     public static void main(String []args){
        Solution sln = new Solution();
        int[] nums = new int[]{1,2,3};
        print(sln.subsets(nums));
     }
}

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        // base/corner cases
        if (nums == null) {
            return null;
        }
        
        // main case
        List<List<Integer>> subsets = new LinkedList<List<Integer>>();
        for (int i = 0; i < Math.pow(2,(nums.length)); i++) {
            int n = i;
            List<Integer> sub = new LinkedList<Integer>();
            for (int j = 0; j < nums.length; j++) {
                int currBit = n % 2;
                if (currBit == 1) {
                    sub.add(nums[j]);
                }
                n = n / 2;
            }
            subsets.add(sub);
        }
        return subsets;
    }
}