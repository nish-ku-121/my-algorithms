/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {

    private Stack<TreeNode> myStack;
    
    public BSTIterator(TreeNode root) {
        this.myStack = new Stack<TreeNode>();
        this.addAllLefts(root);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if (myStack.isEmpty()) {
            return false;
        } else {
            return true;
        }
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode node = this.myStack.pop();
        if (node.right != null) {
            this.addAllLefts(node.right);
        }
        return node.val;
    }
    
    // add node and recursively all its left nodes
    private void addAllLefts(TreeNode node) {
        while (node != null) {
            this.myStack.push(node);
            node = node.left;
        }
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */