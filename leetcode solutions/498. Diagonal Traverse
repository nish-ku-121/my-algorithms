public class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        // base/corner cases
        if (matrix == null) {
            return null;
        }
        if (matrix.length == 0) {
            return new int[0];
        }
        if (matrix[0].length == 0) {
            return new int[0];
        }
        
        // main case
        int x = 0;
        int y = 0;
        int dx = 1;
        int dy = -1;
        int[] res = new int[matrix[0].length*matrix.length];
        for (int i = 0; i < res.length; i++) {
            int canTraverse = traverseCompare(x, y, matrix);
            if (canTraverse == 0) {
                res[i] = matrix[y][x];
            } else {
                // move back to a valid place first
                x -= dx;
                y -= dy;
                
                // move to next place, based on previous out-of-bounds
                if (canTraverse < 0) { // y was out-of-bounds
                    if (x+1 < matrix[y].length) {
                        x += 1;
                    } else { // y was less than 0 then
                        y += 1;
                    }
                } else { // x was out-of-bounds
                    if (y+1 < matrix.length) {
                        y += 1;
                    } else { // x was less than 0 then
                        x += 1;
                    }
                }
                res[i] = matrix[y][x];
                
                dx = dx * -1;
                dy = dy * -1;
            }
            x += dx;
            y += dy;
        }
        return res;
    }
    
    private int traverseCompare(int x, int y, int[][] matrix) {
        if (y < 0 || y >= matrix.length) {
            return -1;
        }
        else if (x < 0 || x >= matrix[y].length) {
            return 1;
        }
        else {
            return 0;
        }
    }
}

|-------- corner/edge cases -----|

if y < 0 x < length: move back, +1 x
if y > length x < length: move back, +1 x
if x < 0 y < length: move back, +1 y
if x > length y < length: move back, +1 y

if x < 0 y > length: move back, +1 x
if y < 0 x > length: move back, +1 y
if x > length y > length: do nothing, we're already done
if x < 0 y < 0: do nothing, not possible

|------ rearranged ---|
v                     v

if y < 0 x < length: move back, +1 x
if y > length x < length: move back, +1 x
if x < 0 y > length: move back, +1 x
-> y out of bounds 
    -> x < length
        +1 x
        
if x < 0 y < length: move back, +1 y
if x > length y < length: move back, +1 y
if y < 0 x > length: move back, +1 y
-> x out of bounds
    -> y < length
        +1 y
