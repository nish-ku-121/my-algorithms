'''
3. Longest Substring Without Repeating Characters

https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest 
substring
 without repeating characters.
 
Example 1:
 Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
'''
def lengthOfLongestSubstring(s):
    def longest_substring_helper(s, start, end):
        # base/corner cases
        if start == end:
            return 1
        if start > end:
            return 0
        if s is None or len(s) == 0:
            return 0
        
        # main case
        unique_chars = set()
        count = 0
        recurse_count = 0
        for i in range(start, end):
            char_i = s[i]
            if not char_i in unique_chars:
                unique_chars.add(char_i)
                count += 1
            else:
                recurse_count = longest_substring_helper(s, i, end)
                break
        return max(count, recurse_count)
    
    return longest_substring_helper(s, 0, len(s))


s = "abcdb"
print(lengthOfLongestSubstring(s))