'''
189. Rotate Array

https://leetcode.com/problems/rotate-array/

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Constraints:
- 1 <= nums.length <= 10^5
- (-2)^31 <= nums[i] <= 2^31 - 1
- 0 <= k <= 10^5

Follow up:
- Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
- Could you do it in-place with O(1) extra space?
'''

# i + kx modn = i + 1 modn
# kx modn = 1 modn

# k=2, n=3
# [1,2,3]
# [_,2,1] d=3
# [_,3,1] d=2
# [2,3,1]

class Solution:
    def rotate(self, nums, k):
        """
        Do not return anything, modify nums in-place instead.
        """
        def explore(nums, i, k, explored, elem_to_place=None):
            if not explored[i]:
                explored[i] = True
                new_idx = (i + k) % len(nums)
                displaced = nums[new_idx]
                nums[new_idx] = nums[i] if elem_to_place is None else elem_to_place
                explore(nums, new_idx, k, explored, elem_to_place=displaced)

        # base/corner cases
        if nums is None or len(nums) == 0 or k <= 0:
            return None
            
        # main case
        k_modded = k % len(nums)
        explored = [False] * len(nums)
        for i in range(len(nums)):
            if not explored[i]:
                explore(nums, i, k_modded, explored)


sln = Solution()
nums = [1,2,3,4,5,6,7]
for k in range(0, 2*len(nums)+1):
    temp_nums = nums.copy()
    sln.rotate(temp_nums, k)
    print(f"k={k}, {temp_nums}")