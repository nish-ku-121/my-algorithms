'''
134. Gas Station

https://leetcode.com/problems/gas-station/

There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

Example 1:
Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Example 2:
Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.

Constraints:
- n == gas.length == cost.length
- 1 <= n <= 10^5
- 0 <= gas[i], cost[i] <= 10^4
'''

'''
Idea:
net[i] = gas[i] - cost[i]
sum(net) > 0 <=> can travel

e.g.
gas = [2,3,4]
cost = [3,4,3]
net = [2-3, 3-4, 4-3] = [-1, -1, 1]
output: -1

gas = [1,2,3,4,5]
cost =[3,4,5,1,2]
net = [-2,-2,-2,3,3]
output: 3

gas = [1,5,2,3,4]
cost =[3,2,4,5,1]
net = [-2,3,-2,-2,3]
output: 4

gas = [1,2,5,3,4]
cost =[3,4,2,5,1]
net = [-2,-2,3,-2,3]
output: 2

algorithm:
1) compute net.
2) starting at index 0, keep a running sum until it drops below 0.
    a) if it drops below 0 at index i, restart 2) at index i+1.
    b) if it never drops below 0 and we complete the loop, then return the starting index.
    
corollary: you don't have to compute the "loop sum" for each index (time: O(n^2)), or even each index with value >= 0 (time: O(n^2)), just do 2) instead (time: O(n)).
proof:
n = net array (as loop)
...,n_i,...,n_x,...,n_j,...
-> -> -> (i.e. summing clockwise)

suppose sum starting from n_i first drops below 0 at n_j, i.e.:
- sum(n_i,...,n_j) < 0
- sum(n_i,...,n_x) >= 0 for all x < j

then:
    sum(n_x,...,n_j) = sum(n_i,...,n_j) - sum(n_i,...,n_x) < 0
so if it's not possible to get from n_i to n_j without dropping below 0, then it's also not possible to get from n_x to n_j without dropping below 0, regardless of what n_x is.
therefore, the next meaningful index to check for "loop sum" > 0 would be j+1. QED.

'''

import numpy as np

class Solution:
    def canCompleteCircuit(self, gas, cost):
        '''
        time complexity: O(n)
        space complexity: O(n)
        '''
        def crawl_while_positive(arr, start):
            completed = False
            # base/corner cases
            if start >= len(arr) or start < 0:
                return start, False
            
            # main case
            i = start
            running_sum = 0
            count = 0
            while count < len(arr):
                running_sum += arr[i]
                count += 1
                if running_sum < 0:
                    return i, False
                else:
                    i = (i+1) % len(arr)
            return start, True

        # base/corner cases
        if (gas is None or len(gas) == 0
            or cost is None or len(cost) == 0
            or len(gas) != len(cost)):
            return -1

        # main case
        net = np.subtract(gas, cost)
        i = 0
        while i < (len(net)):
            idx_failed_at, completed = crawl_while_positive(net, i)
            if completed:
                return i
            else:
                i = idx_failed_at + 1
        return -1


sln = Solution()
gas = [1,5,2,3,4]
cost =[3,2,4,5,1]
print(sln.canCompleteCircuit(gas, cost))