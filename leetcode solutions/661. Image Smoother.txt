Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].

  



    public static int[][] imageSmoother(int[][] M) {
        // base/corner cases
    	if (M == null || M.length == 0) {
        	return M;
    	}
        
        // main case
        int[][] smoothed = new int[M.length][];
        for (int i = 0; i < M.length; i++) {
            smoothed[i] = new int[M[i].length];
            for (int j = 0; j < M[i].length; j++) {     
                smoothed[i][j] = avgInRange(M, i, j);
            }
        }
        return smoothed;
    }
    
    private static int avgInRange(int[][] M, int i, int j) {
        int val = 0;
        int count = 0;
        for (int a = i-1; a <= i+1; a++) {
            for (int b = j-1; b <=i+1 ; b++) {
                if (!outOfBounds(M, a, b)) {
                    val += M[a][b];
                    count++;
                }
            }
        }
        return val / count;
    }
    
    private static boolean outOfBounds(int[][] M, int i, int j) {
        boolean iOut = i >= M.length || i < 0;
        if (iOut) {
            return iOut;
        }
        boolean jOut = j >= M[i].length || j < 0;
        return jOut;
    }
  
  private static void print(int[][] M) {
    for (int i = 0; i < M.length; i++) {
            for (int j = 0; j < M[i].length; j++) {     
                System.out.print(M[i][j] + " ");
            }
      System.out.println();
        }
  }