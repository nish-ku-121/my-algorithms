Given an n-ary tree, return the preorder traversal of its nodes' values.

 
For example, given a 3-ary tree:


 
Return its preorder traversal as: [1,3,5,6,2,4].

 
Note: Recursive solution is trivial, could you do it iteratively?


import java.util.*;



/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        // base/corner cases
        if (root == null) {
            return null;
        }
        
        // main case
        List<Integer> preorderList = new ArrayList<Integer>();
        Stack<Node> s = new Stack<Node>();
        s.push(root);
        while (!s.empty()) {
            Node n = s.pop();
            if (n != null) {
                preorderList.add(new Integer(n.val));
                if (n.children != null) {
                    ListIterator<Node> iter = n.children.listIterator(n.children.size());
                    while(iter.hasPrevious()) {
                        s.push(iter.previous());
                    }
                }
            }
        }
        return preorderList;
    }
}