'''
98. Validate Binary Search Tree

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
- The left  subtree of a node contains only nodes with keys less than the node's key.
- The right subtree of a node contains only nodes with keys greater than the node's key.
- Both the left and right subtrees must also be binary search trees.

Example 1:
  2
 /  \
1    3
Input: root = [2,1,3]
Output: true

Example 2:
        5
      /   \
     1     4
         /   \
        3     6
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

Constraints:
- The number of nodes in the tree is in the range [1, 10^4].
- (-2)^31 <= Node.val <= (2)^31 - 1
'''

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def is_valid_BST(node):
    # base / corner case
    if node is None:
        return True
    
    # main case
    left_valid = True
    right_valid = True
    if node.left is not None:
        left_valid = node.left.val <= node.val and is_valid_BST(node.left)
    if node.right is not None:
        right_valid = node.val <= node.right.val and is_valid_BST(node.right)
    return left_valid and right_valid

def convert_to_BST(arr, i=0):
    # base/corner cases
    if i >= len(arr):
        return None
    if arr[i] is None:
        return None
    
    # main case
    node = TreeNode(arr[i])
    # children at 2*i + 1, 2*i + 2
    # 0 -> 1, 2 => 2*0 + 1, 2*0 + 2
    # 1 -> 3, 4 => 2*1 + 1, 2*1 + 2
    # 2 -> 5, 6 => 2*2 + 1, 2*2 + 2
    # 3 -> 7, 8 => 2*3 + 1, 2*3 + 2
    # 4 -> 9, 10 => 2*4 + 1, 2*4 + 2
    # 5 -> 11, 12 => 2*5 + 1, 2*5 + 2
    # 6 -> 13, 14 => 2*6 + 1, 2*6 + 2
    # ...
    node.left = convert_to_BST(arr, i=((2*i) + 1))
    node.right = convert_to_BST(arr, i=((2*i) + 2))
    return node
    
    
# root = convert_to_BST([2,1,3])
root = convert_to_BST([5,1,4,None,None,3,6])
print(is_valid_BST(root))