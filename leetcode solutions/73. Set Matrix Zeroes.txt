'''
73. Set Matrix Zeroes

https://leetcode.com/problems/set-matrix-zeroes/

Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 
Constraints:
    - m == matrix.length
    - n == matrix[0].length
    - 1 <= m, n <= 200
    - (-2)^31 <= matrix[i][j] <= (2)^31 - 1


Follow up:
    - A straightforward solution using O(mn) space is probably a bad idea.
    - A simple improvement uses O(m + n) space, but still not the best solution.
    - Could you devise a constant space solution?
'''

class Solution:
    def setZeroes(self, matrix):
        """
        Do not return anything, modify matrix in-place instead.
        Time Complexity: O(mn)
        Space Complexity: O(m + n)
        """
        def safe_get(matrix, i, j):
            if i < 0 or i >= len(matrix):
                return None
            if j < 0 or j >= len(matrix[i]):
                return None
            else:
                return matrix[i][j]
        
        row_indices = []
        column_indices = []
        for i in range(len(matrix)):
            for j in range(len(matrix[i])):
                if matrix[i][j] == 0:
                    row_indices.append(i)
                    column_indices.append(j)
        
        for row_idx in row_indices:
            for j in range(len(matrix[row_idx])):
                matrix[row_idx][j] = 0
        
        for column_idx in column_indices:
            for i in range(len(matrix)):
                matrix[i][column_idx] = 0

def pretty_print(matrix):
    for row in matrix:
        print(row)
    
sln = Solution()
matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
print("before:")
pretty_print(matrix)
sln.setZeroes(matrix)
print("after:")
pretty_print(matrix)