'''
79. Word Search

https://leetcode.com/problems/word-search/

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true

Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 
Constraints:
- m == board.length
- n = board[i].length
- 1 <= m, n <= 6
- 1 <= word.length <= 15
- board and word consists of only lowercase and uppercase English letters.
    
Follow up: Could you use search pruning to make your solution faster with a larger board?
'''

class Solution:
    def exist(self, board, word):
        def safe_get(board, i, j):
            if i < 0 or i >= len(board):
                return None
            if j < 0 or j >= len(board[i]):
                return None
            return board[i][j]

        def explore(board, i, j, word, explored):
            # base/corner cases
            elem = safe_get(board, i, j)
            if elem is None:
                return False
            if explored[i][j]:
                return False
            if len(word) == 0:
                return True
            if elem != word[0]:
                return False
            
            # main case
            explored[i][j] = True
            if elem == word[0]:
                subword = word[1:]
                if explore(board, i+1, j, subword, explored):
                    return True
                if explore(board, i-1, j, subword, explored):
                    return True
                if explore(board, i, j+1, subword, explored):
                    return True
                if explore(board, i, j-1, subword, explored):
                    return True
            explored[i][j] = False
            return False

        explored = [[False for _ in range(len(board[i]))] for i in range(len(board))]
        for i in range(len(board)):
            for j in range(len(board[i])):
                if explore(board, i, j, word, explored):
                    return True
        return False


sln = Solution()
board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]]
word = "ABCB"
print(sln.exist(board, word))